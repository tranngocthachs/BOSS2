package uk.ac.warwick.dcs.boss.frontend.sites.configpages;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Properties;
import java.util.Random;

import javax.servlet.ServletException;

import org.apache.log4j.Level;
import org.apache.velocity.Template;
import org.apache.velocity.VelocityContext;

import uk.ac.warwick.dcs.boss.frontend.Page;
import uk.ac.warwick.dcs.boss.frontend.PageContext;
import uk.ac.warwick.dcs.boss.frontend.PageDispatcherServlet;
import uk.ac.warwick.dcs.boss.frontend.PageLoadException;
import uk.ac.warwick.dcs.boss.model.ConfigurationOption;
import uk.ac.warwick.dcs.boss.model.FactoryException;
import uk.ac.warwick.dcs.boss.model.FactoryRegistrar;
import uk.ac.warwick.dcs.boss.model.dao.DAOException;
import uk.ac.warwick.dcs.boss.model.dao.DAOFactory;
import uk.ac.warwick.dcs.boss.model.dao.IDAOSession;
import uk.ac.warwick.dcs.boss.model.dao.IPersonDAO;
import uk.ac.warwick.dcs.boss.model.dao.beans.Person;

public class PerformConfigPage extends Page {
	
	public PerformConfigPage() throws PageLoadException {
		super("system_configured", AccessLevel.NONE);
	}

	public void handleGet(PageContext pageContext, Template template, VelocityContext templateContext) throws ServletException,
			IOException {
		throw new ServletException("Unexpected GET");
	}

	protected void handlePost(PageContext pageContext, Template template,
			VelocityContext templateContext) throws ServletException,
			IOException {
		// Load properties
		Properties configuration = new Properties();
		for (ConfigurationOption option : FactoryRegistrar.knownConfigurationOptions()) {
			if (pageContext.getParameter(option.getName()) == null) {
				throw new ServletException("missing " + option.getName() + " parameter");
			}
			configuration.setProperty(option.getName(), pageContext.getParameter(option.getName()));
		}
		
		// Attempt to reload
		boolean success = false;
		Throwable causeForFailure = null;
		try {
			FactoryRegistrar.initialiseFactories(configuration);
			success = true;
		} catch (FactoryException e) {
			pageContext.log(Level.ERROR, e);
			causeForFailure = e;
		}

		// Attempt to create admin user
		if (success) {
			success = false;
			
			IDAOSession f;
			try {
				DAOFactory df = (DAOFactory)FactoryRegistrar.getFactory(DAOFactory.class);
				f = df.getInstance();
			} catch (FactoryException e) {
				throw new ServletException("dao init error", e);
			}

			try {
				f.beginTransaction();
				f.initialiseStorage(false);
				IPersonDAO personDao = f.getPersonDAOInstance();
				
				Random random = new Random();
				StringBuffer newPassword = new StringBuffer();
				for (int i = 0; i < 8; i++) {
					newPassword.append((char)(random.nextInt(126 - 65) + 65));
				}
				
				Person administrator = new Person();
				administrator.setUniqueIdentifier("admin");
				Collection<Person> administrators = personDao.findPersistentEntitiesByExample(administrator);
				if (administrators.size() == 0) {
					administrator.setAdministrator(true);
					administrator.setEmailAddress("admin@example.invalid");
					administrator.setChosenName("Administrator account");
					administrator.setPassword(Person.passwordHash(newPassword.toString()));
					personDao.createPersistentCopy(administrator);
				} else {
					administrator = administrators.iterator().next();
					administrator.setAdministrator(true);
					administrator.setPassword(Person.passwordHash(newPassword.toString()));
					personDao.updatePersistentEntity(administrator);
				}
				
				pageContext.log(Level.INFO, "New admin password: " + newPassword.toString());
				templateContext.put("adminPassword", newPassword.toString());
				f.endTransaction();
				
				success = true;
			} catch (DAOException e) {
				pageContext.log(Level.ERROR, e);
				if (f != null) {
					f.abortTransaction();
				}
				causeForFailure = e;
			}
		}
		
		// Write out the settings
		if (success) {
			success = false;
			try {
				File propertiesFile = new File(pageContext.getConfigurationFilePath());
				FileOutputStream writer = new FileOutputStream(propertiesFile);
				configuration.store(writer, "Automatically generated by BOSS2");
				writer.close();
				success = true;
			} catch (IOException e) {
				pageContext.log(Level.ERROR, e);
				causeForFailure = e;
			}

		}
		
		// Success?
		if (success) {
			templateContext.put("success", true);
			PageDispatcherServlet.loadPageFactories();
		} else {
			StringWriter writer = new StringWriter();
			PrintWriter pw = new PrintWriter(writer);
			causeForFailure.printStackTrace(pw);
			pw.close();
			templateContext.put("success", false);
			templateContext.put("exception", writer.getBuffer().toString());
		}
		
		// Render
		pageContext.renderTemplate(template, templateContext);
	}
	
	

}
